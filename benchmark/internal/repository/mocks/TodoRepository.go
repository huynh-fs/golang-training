// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	model "github.com/huynh-fs/gin-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo
func (_m *TodoRepository) Create(todo *model.Todo) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: todo
func (_m *TodoRepository) Delete(todo *model.Todo) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByUserID provides a mock function with given fields: userID
func (_m *TodoRepository) FindAllByUserID(userID uint) ([]model.Todo, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByUserID")
	}

	var r0 []model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]model.Todo, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []model.Todo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndUserID provides a mock function with given fields: id, userID
func (_m *TodoRepository) FindByIDAndUserID(id uint, userID uint) (*model.Todo, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUserID")
	}

	var r0 *model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*model.Todo, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *model.Todo); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: todo
func (_m *TodoRepository) Update(todo *model.Todo) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
