// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	model "github.com/huynh-fs/gin-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenRepository is an autogenerated mock type for the RefreshTokenRepository type
type RefreshTokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: token
func (_m *RefreshTokenRepository) Create(token *model.RefreshToken) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RefreshToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: token
func (_m *RefreshTokenRepository) Delete(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByToken provides a mock function with given fields: token
func (_m *RefreshTokenRepository) FindByToken(token string) (*model.RefreshToken, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.RefreshToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *model.RefreshToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRefreshTokenRepository creates a new instance of RefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenRepository {
	mock := &RefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
